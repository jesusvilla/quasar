const path = require('path')
const fs = require('fs')
const buildUtils = require('./build.utils')

const FONT_REGEX = /(\w+):\s('[\w\-\s]+')/gi
const ICON_TYPES = [
  {
    name: 'material-icons',
    prefix: '',
    prefixRes: 'mat',
    case: 'snake'
  },
  {
    name: 'mdi-v4',
    prefix: 'mdi',
    prefixRes: 'mdi',
    case: 'kebab'
  },
  {
    name: 'mdi-v3',
    prefix: 'mdi',
    prefixRes: 'mdi',
    case: 'kebab'
  },
  {
    name: 'fontawesome-v5',
    prefix: ' fa', // /^fa[brs] fa-/
    prefixRes: '',
    case: 'kebab'
  },
  {
    name: 'fontawesome-v5-pro',
    prefix: ' fa', // /^fa[brs] fa-/
    prefixRes: '',
    case: 'kebab'
  },
  {
    name: 'eva-icons',
    prefix: 'eva',
    prefixRes: 'eva',
    case: 'kebab'
  },
  {
    name: 'themify',
    prefix: 'ti',
    prefixRes: 'ti',
    case: 'kebab'
  }
]

const svgIconSetBanner = setName => `
/*
 * Do not edit this file. It is automatically generated
 * from its webfont counterpart (same filename without "svg-" prefix).
 * Edit that file instead (${setName}.js).
 */
`

function resolve (_path) {
  return path.resolve(__dirname, '..', _path)
}

/* function findTypeIcon (icon) {
  return ICON_TYPES.find(type => {
    return type.prefix.includes(icon)
  })[0]
} */

function generateIconName (type, icon) {
  if (type.case === 'kebab') {
    return (type.prefixRes + '-' + icon.replace(type.prefix, '')).replace(/-+(\w)/g, (_, c) => c.toUpperCase()).replace(/\w/, u => u.toLowerCase())
  }
  else if (type.case === 'snake') {
    return (type.prefixRes + '_' + icon.replace(type.prefix, '')).replace(/_+(\w)/g, (_, c) => c.toUpperCase()).replace(/\w/, u => u.toLowerCase())
  }
  return icon
}

function addSvgIconSets () {
  // prefixRes = prefix || prefixRes

  ICON_TYPES.forEach(type => {
    if (type.name !== 'eva-icons') {
      return void 0
    }
    const fileContent = fs.readFileSync(resolve(`icon-set/${type.name}.js`), 'utf-8')

    const firstProp = `name: '${type.name}'`
    const importList = {}

    const contentString = fileContent.replace(FONT_REGEX, (text, prop, value) => {
      if (text === firstProp) {
        return `name: 'svg-${type.name}'`
      }
      const
        icon = value.replace(/'/g, ''), // value.replace(new RegExp(`'${type.prefix}`, 'g'), '')
        newType = value.includes(type.prefix) ? type : ICON_TYPES[0], // material-icons is default
        iconName = generateIconName(newType, icon)

      if (importList[newType.name] === void 0) {
        importList[newType.name] = [iconName]
      }
      else if (importList[newType.name].includes(iconName) === false) {
        importList[newType.name].push(iconName)
      }

      return `${prop}: ${iconName}`
    })
    const importString = Object.keys(importList)
      .map(listName => `import {\n  ` + importList[listName].join(',\n  ') + `\n} from '@quasar/extras/${listName}'`)
      .join('\n\n')

    const content = svgIconSetBanner(type.name) + '\n' + importString + '\n\n' + contentString
    buildUtils.writeFile(resolve(`icon-set/svg-${type.name}.js`), content, 'utf-8')
  })
}

addSvgIconSets()
